

<%- include('partials/header'); -%>

<script>


</script>
<div class="profilePage">
  <div class="leftSideProfile">

    <ul class="ProfileUl">
      <li class="ProfileLI"><div>EMAIL :</div> <div><%=user.email%></div> </li>
      <li class="ProfileLI"><div>FIRT NAME :</div> <div><%=user.firstName %></li>
      <li class="ProfileLI"><div>LAST NAME :</div> <div><%=user.lastName %></li>
      <li class="ProfileLI"><div>COUNTRY :</div> <div><%=user.country%></li>
      <li class="ProfileLI"><div>PHONE :</div> <div><%=user.phone%></li>
      <li class="ProfileLI"><div>TEACHER :</div> <div><%=user.isTeacher%></div> </li>
   
    <li><div class="updateButton"><a href="/update" class="btn"><div class="btnStart">Update Profile </div> </a><a href="/"> <div class="btnStart" style="margin-left: 20px; background-color: gray;"> Back </div></a> </div>   </li>
    <li><div class="resetButton"><a href="/changepassword" class="btn"><div class="btnReset">Reset Password </div> </a></div>   </li>
    </ul>

  
  </div>
<div class="rightSideProfile">
  <div class="ImageSpanDiv">

    <div class="circle-image">


        <input type="hidden" name="_id" value="<%=user._id%>">

      <% if (user.profile) { %>      
          <img src="<%=user.profile%>" alt="Your Image" onclick="selectFile()">
      <% } else { %>
        <img src="/avatar.png" alt="Your Image" onclick="selectFile()">
        <% } %>

        <input type="file" id="profile" name="profile"  style="display: none;"  onchange="onUpload()" /> 


        

    </div>

      <div>
      <span class="clickSpanImage" >"Click the image to select a new one."


      </span>
    
      </div>
    </div>
</div>

</div>


<script>

const form = document.querySelector('form');
function selectFile() {
  document.getElementById('profile').click();
}


  async function onUpload() {
  const fileInput = document.getElementById('profile');
  const file = fileInput.files[0];
  const base64String = await convertToBase64(file);
  console.log("Original file size:", base64String.length / 1024, "kB");

  // Resize the image if it is larger than 100kB
  if (base64String.length > 100 * 1024) {
    const image = new Image();
    image.src = base64String;
    await new Promise(resolve => image.onload = resolve);
    const canvas = document.createElement("canvas");
    const context = canvas.getContext("2d");
    const width = image.width;
    const height = image.height;
    const maxDimension = Math.max(width, height);
    let newWidth, newHeight;
    if (maxDimension > 300) {
      const scale = 300 / maxDimension;
      newWidth = width * scale;
      newHeight = height * scale;
    } else {
      newWidth = width;
      newHeight = height;
    }
    canvas.width = newWidth;
    canvas.height = newHeight;
    context.drawImage(image, 0, 0, newWidth, newHeight);
    const profile = canvas.toDataURL("image/jpeg", 0.8);
    const _id = document.getElementsByName('_id')[0].value;
  
    try {
      const res = await fetch('/update', { 
        method: 'PUT', 
        body: JSON.stringify({_id,profile}),
        headers: {'Content-Type': 'application/json'}
      });
      const data = await res.json();
      console.log('data', data);
      location.assign('/profile');
      
    }
    catch (err) {
      console.log('error',err);
    }

  } else {
    const image = new Image();
    image.src = base64String;
    await new Promise(resolve => image.onload = resolve);
    const canvas = document.createElement("canvas");
    const context = canvas.getContext("2d");
    const width = image.width;
    const height = image.height;
    const maxDimension = Math.max(width, height);
    let newWidth, newHeight;
    if (maxDimension > 300) {
      const scale = 300 / maxDimension;
      newWidth = width * scale;
      newHeight = height * scale;
    } else {
      newWidth = width;
      newHeight = height;
    }
    canvas.width = newWidth;
    canvas.height = newHeight;
    context.drawImage(image, 0, 0, newWidth, newHeight);
    const profile = canvas.toDataURL("image/jpeg", 0.8);
    const _id = document.getElementsByName('_id')[0].value;

    try {
      const res = await fetch('/update', { 

        method: 'PUT', 
        body: JSON.stringify({_id,profile}),
        headers: {'Content-Type': 'application/json'}
      });
      const data = await res.json();
      console.log('data', data);
      location.assign('/profile');
      
    }
    catch (err) {
      console.log('error',err);
    }
  }
}


      function convertToBase64(file) {
        return new Promise((resolve, reject) => {
          const fileReader = new FileReader();
          fileReader.readAsDataURL(file);

          fileReader.onload = () => {
            resolve(fileReader.result);
          };

          fileReader.onerror = (error) => {
            reject(error);
          };
        });
      }



</script> 




<%- include('partials/footer'); -%>